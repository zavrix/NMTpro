import platform
import subprocess
import json
import os
import datetime
import time

from alert import send_email
from config import GMAIL_RECEIVER as RECIPIENT
from devices import devices
from sshdevices import ssh_devices
from ssh_m import ssh_get_stats
from sshnotworking import log_ssh_failure

STATUS_FILE = "status.json"
LAST_REPORT_FILE = "last_report.txt"

def ping(ip):
    cmd = ['ping', '-n' if platform.system() == 'Windows' else '-c', '1', ip]
    return subprocess.run(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL).returncode == 0

def load_previous_status():
    if not os.path.exists(STATUS_FILE):
        return {}
    try:
        with open(STATUS_FILE, "r") as f:
            return json.load(f)
    except Exception as e:
        print(f"[ERROR] Failed to load {STATUS_FILE}: {e}")
        return {}

def save_current_status(status):
    try:
        with open(STATUS_FILE, "w") as f:
            json.dump(status, f, indent=4)
    except Exception as e:
        print(f"[ERROR] Failed to save {STATUS_FILE}: {e}")

def should_send_report():
    try:
        if not os.path.exists(LAST_REPORT_FILE):
            with open(LAST_REPORT_FILE, "w") as f:
                f.write(str(time.time()))
            return True
        with open(LAST_REPORT_FILE, "r") as f:
            last_time = float(f.read().strip())
            return time.time() - last_time >= 3600
    except Exception:
        return True

def update_last_report_time():
    with open(LAST_REPORT_FILE, "w") as f:
        f.write(str(time.time()))

def generate_html_email(device_statuses):
    rows = ""
    for device in device_statuses:
        cpu = device.get('cpu', 'N/A')
        memory = device.get('memory', 'N/A')
        upload = device.get('upload_kbps', 'N/A')
        download = device.get('download_kbps', 'N/A')
        status = device.get("status", "Unknown")
        status_color = "#4CAF50" if status == "Online" else "#F44336"

        rows += f"""
            <tr>
                <td>{device['name']}</td>
                <td>{device['ip']}</td>
                <td style="color: {status_color}; font-weight: bold;">{status}</td>
                <td>{cpu if cpu is not None else 'N/A'}%</td>
                <td>{memory if memory is not None else 'N/A'}%</td>
                <td>{upload if upload is not None else 'N/A'} KB/s</td>
                <td>{download if download is not None else 'N/A'} KB/s</td>
            </tr>
        """

    return f"""
    <html>
    <body style="font-family: Arial, sans-serif; background: #f4f4f4; padding: 20px;">
        <div style="max-width: 800px; margin: auto; background: #ffffff; padding: 20px; border-radius: 10px;">
            <h2 style="color: #004080; text-align: center; margin-bottom: 20px;">
                ðŸ“¡ NMTpro Network Monitoring Report
            </h2>

            <table width="100%" cellpadding="10" cellspacing="0" style="border-collapse: collapse; font-size: 14px;">
                <thead style="background-color: #004080; color: white;">
                    <tr>
                        <th align="left">Device Name</th>
                        <th align="left">IP Address</th>
                        <th align="left">Status</th>
                        <th align="left">CPU %</th>
                        <th align="left">Memory %</th>
                        <th align="left">Upload</th>
                        <th align="left">Download</th>
                    </tr>
                </thead>
                <tbody style="background-color: #fafafa; color: #333;">
                    {rows}
                </tbody>
            </table>

            <p style="margin-top: 30px; font-size: 0.9rem; color: #888; text-align: center;">
                Report generated by <strong>NMTpro</strong><br>
                {datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
            </p>
        </div>
    </body>
    </html>
    """

def get_status_data():
    previous_status = load_previous_status()
    now = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    device_statuses = []
    online = 0
    offline = 0
    alert_needed = False

    for ip, name in devices.items():
        is_online = ping(ip)
        status = "Online" if is_online else "Offline"

        previous_status.setdefault(ip, {
            "name": name,
            "status": "Unknown",
            "last_online": None,
            "last_offline": None,
            "cpu": None,
            "memory": None,
            "upload_kbps": None,
            "download_kbps": None
        })

        if is_online:
            previous_status[ip]["last_online"] = now
            online += 1
        else:
            previous_status[ip]["last_offline"] = now
            offline += 1
            if previous_status[ip]["status"] != "Offline":
                alert_needed = True

        previous_status[ip]["status"] = status

        device_statuses.append({
            "name": name,
            "ip": ip,
            "status": status,
            "last_online": previous_status[ip]["last_online"],
            "last_offline": previous_status[ip]["last_offline"],
            "cpu": "N/A",
            "memory": "N/A",
            "upload_kbps": "N/A",
            "download_kbps": "N/A"
        })

    for ip, device_info in ssh_devices.items():
        name = device_info.get("name", ip)
        username = device_info.get("username")
        password = device_info.get("password")

        is_online = ping(ip)
        status = "Online" if is_online else "Offline"

        previous_status.setdefault(ip, {
            "name": name,
            "status": "Unknown",
            "last_online": None,
            "last_offline": None,
            "cpu": None,
            "memory": None,
            "upload_kbps": None,
            "download_kbps": None
        })

        if is_online:
            previous_status[ip]["last_online"] = now
            ssh_cpu, ssh_upload, ssh_download = ssh_get_stats(ip, username, password)
            if ssh_cpu is not None:
                previous_status[ip]["cpu"] = ssh_cpu
                previous_status[ip]["upload_kbps"] = ssh_upload
                previous_status[ip]["download_kbps"] = ssh_download
            else:
                log_ssh_failure(ip, "SSH stats fetch failed after ping success")
            online += 1
        else:
            previous_status[ip]["last_offline"] = now
            offline += 1
            if previous_status[ip]["status"] != "Offline":
                alert_needed = True

        previous_status[ip]["status"] = status

        device_statuses.append({
            "name": name,
            "ip": ip,
            "status": status,
            "last_online": previous_status[ip]["last_online"],
            "last_offline": previous_status[ip]["last_offline"],
            "cpu": previous_status[ip].get("cpu"),
            "memory": previous_status[ip].get("memory"),
            "upload_kbps": previous_status[ip].get("upload_kbps"),
            "download_kbps": previous_status[ip].get("download_kbps")
        })

    save_current_status(previous_status)

    if alert_needed or should_send_report():
        html_content = generate_html_email(device_statuses)
        send_email("ðŸ“¡ Device Status Report", html_content, RECIPIENT, html=True)
        update_last_report_time()

    return {
        "total": len(devices) + len(ssh_devices),
        "online": online,
        "offline": offline,
        "devices": device_statuses
    }
